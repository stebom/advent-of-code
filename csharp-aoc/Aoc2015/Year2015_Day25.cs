using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Common;
using System.Diagnostics.Metrics;
using System.Numerics;

namespace AdventOfCode;

internal class Year2015_Day25
{
    // The first code is 20151125. After that, each code is generated by taking the previous one,
    // multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.
    const long initial = 20151125;
    const long factor = 252533;
    const long divisor = 33554393;

    // To continue, please consult the code grid in the manual. Enter the code at row 2947, column 3029.
    const int rows = 2947;
    const int columns = 3029;

    internal static void Solve()
    {
        int depth = 0;
        int row = 0;
        int col = 0;

        foreach (var code in Generate(initial))
        {
            if (row == 0 && col == depth)
            {
                depth++;
                row = depth;
                col = 0;
            }
            else
            {
                row--;
                col++;
            }

            if (row == (rows - 1) && col == (columns - 1))
            {
                Console.WriteLine($"({rows},{columns}): {code}");
                break;
            }
        }
    }

    static IEnumerable<long> Generate(long code)
    {
        while (true)
        {
            code *= factor;
            code %= divisor;
            yield return code;
        }
    }
}